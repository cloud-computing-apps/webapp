name: Packer Build
on:
  push:
    branches:
      - main

jobs:
  build:
    if: ${{ github.event.repository.fork == false }}
    name: 'packer-build'
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.5'

      - name: 'Setup Postgres'
        run: |
          sudo systemctl start postgresql
          sudo systemctl enable postgresql
          sudo -u postgres psql -c "CREATE USER ${{ secrets.TEST_DB_USER }} WITH PASSWORD  '${{ secrets.TEST_DB_PASSWORD }}'"
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.TEST_DB_NAME }}"
          sudo -u postgres psql -c "ALTER ROLE ${{ secrets.TEST_DB_USER }} SUPERUSER"
          sudo systemctl restart postgresql

      - name: 'Run Go Test'
        env:
          TEST_DB_HOST: ${{ secrets.TEST_DB_HOST }}
          TEST_DB_USER: ${{ secrets.TEST_DB_USER }}
          TEST_DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          TEST_DB_NAME: ${{ secrets.TEST_DB_NAME }}
          TEST_DB_PORT: ${{ secrets.TEST_DB_PORT }}
        run: |
          go test -v ./...    

      - name: 'Install Packer'
        uses: hashicorp/setup-packer@v2
        with:
          version: '1.12.0'

      - name: 'Configure AWS CLI'
        run: |
          mkdir -p ~/.aws
          cat <<EOF > ~/.aws/credentials
          [dev]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          
          [demo]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          EOF
          
          cat <<EOF > ~/.aws/config
          [profile dev]
          region=${{ secrets.AWS_REGION }}
          
          [profile demo]
          region=${{ secrets.AWS_REGION }}
          EOF

      - name: 'Build Dependencies'
        run: go mod tidy

      - name: 'Build Go Binary'
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o webapp main.go

      - name: 'Copy Go Binary to Packer Directory'
        run: cp ./webapp ./packer/

      - name: 'Packer Initialise'
        run: packer init ./packer/webapp.pkr.hcl

      - name: 'Packer Validate'
        run: |
          cd ./packer
          packer validate .

      - name: 'Packer Build'
        run: |
          cd ./packer
          packer build .

      - name: 'Share image to Demo Account AWS'
        id: share_ami_id
        run: |
          IMAGE_ID=$(aws ec2 describe-images \
              --profile dev \
              --filters "Name=name,Values=webapp-*" \
              --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
              --output text)
          
          echo "Latest AMI ID: $IMAGE_ID"
          echo "::set-output name=ami::$IMAGE_ID"
          
          aws ec2 modify-image-attribute \
              --profile dev \
              --image-id $IMAGE_ID  \
              --launch-permission "Add=[{UserId=${{ secrets.AWS_DEMO_ACCOUNT }}}]"

      - name: 'Fetch Launch Template'
        id: fetch_lt_id
        run: |
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
              --profile demo \
              --filters "Name=launch-template-name,Values=csye6225-asg-*" \
              --query "LaunchTemplates[0].LaunchTemplateId" \
              --region ${{ secrets.AWS_REGION }} \
              --output text)
          echo "Launch Template ID: $LAUNCH_TEMPLATE_ID"
          echo "::set-output name=lt_id::$LAUNCH_TEMPLATE_ID"

      - name: 'Create New Launch Template Version'
        id: create_lt_version
        run: |          
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --profile demo \
            --launch-template-id ${{ steps.fetch_lt_id.outputs.lt_id }} \
            --source-version 1 \
            --version-description "Updated with AMI ${{ steps.share_ami_id.outputs.ami }}" \
            --launch-template-data "{\"ImageId\":\"${{ steps.share_ami_id.outputs.ami }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --region ${{ secrets.AWS_REGION }} \
            --output text)
          echo "New launch template version: $NEW_VERSION"
          echo "::set-output name=lt_version::$NEW_VERSION"

      - name: 'Update Auto Scaling Group'
        run: |
          aws autoscaling update-auto-scaling-group \
            --profile demo \
            --auto-scaling-group-name webapp-asg-vpc-1 \
            --launch-template "LaunchTemplateId=${{ steps.fetch_lt_id.outputs.lt_id }},Version=${{ steps.create_lt_version.outputs.lt_version }}"

      - name: 'Trigger Instance Refresh'
        run: |
          refresh_id=$(aws autoscaling start-instance-refresh \
            --profile demo \
            --auto-scaling-group-name webapp-asg-vpc-1 \
            --preferences '{"MinHealthyPercentage":80, "InstanceWarmup":300}' \
            --query 'InstanceRefreshId' \
            --output text)
            
          echo "Instance Refresh triggered with ID: $refresh_id"
        
          while true; do
            state=$(aws autoscaling describe-instance-refreshes \
            --profile demo \
            --auto-scaling-group-name webapp-asg-vpc-1 \
            --query "InstanceRefreshes[?InstanceRefreshId=='${refresh_id}'].Status" \
            --output text)
          
            echo "Current instance refresh status: $state"
            
            if [ "$state" = "Successful" ]; then
              echo "Instance refresh completed successfully."
              exit 0
            elif [ "$state" = "Failed" ] || [ "$state" = "Cancelling" ] || [ "$state" = "Cancelled" ]; then
              echo "Instance refresh failed, was cancelled, or is being cancelled."
              exit 1
            else
              sleep 30
            fi
          done
        shell: bash

