name: Packer Build
on:
  push:
    branches:
      - main

jobs:
  build:
    name: 'packer-build'
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.5'

      - name: 'Setup Postgres'
        run: |
          sudo systemctl start postgresql
          sudo systemctl enable postgresql
          sudo -u postgres psql -c "CREATE USER ${{ secrets.TEST_DB_USER }} WITH PASSWORD  '${{ secrets.TEST_DB_PASSWORD }}'"
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.TEST_DB_NAME }}"
          sudo -u postgres psql -c "ALTER ROLE ${{ secrets.TEST_DB_USER }} SUPERUSER"
          sudo systemctl restart postgresql

      - name: 'Run Go Test'
        env:
          TEST_DB_HOST: ${{ secrets.TEST_DB_HOST }}
          TEST_DB_USER: ${{ secrets.TEST_DB_USER }}
          TEST_DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          TEST_DB_NAME: ${{ secrets.TEST_DB_NAME }}
          TEST_DB_PORT: ${{ secrets.TEST_DB_PORT }}
        run: |
          go test -v ./...    

      - name: 'Install Packer'
        uses: hashicorp/setup-packer@v2
        with:
          version: '1.12.0'

      - name: 'Configure AWS CLI'
        run: |
          mkdir -p ~/.aws
          echo "[dev]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}" >> ~/.aws/credentials
          echo "[profile dev]" > ~/.aws/config
          echo "region=${{ secrets.AWS_REGION }}" >> ~/.aws/config

      - name: 'Build Dependencies'
        run: go mod tidy

      - name: 'Build Go Binary'
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o webapp main.go

      - name: 'Copy Go Binary to Packer Directory'
        run: cp ./webapp ./packer/

      - name: 'Create .env file'
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" > ./packer/scripts/.env

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
         credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT}}'

      - name: 'Packer Initialise'
        run: packer init ./packer/webapp.pkr.hcl

      - name: 'Packer Validate'
        run: |
          cd ./packer
          packer validate .

      - name: 'Packer Build'
        run: |
          cd ./packer
          packer build .

      - name: 'Share image to Demo Account AWS'
        run: |
          IMAGE_ID=$(aws ec2 describe-images \
              --profile dev \
              --filters "Name=name,Values=webapp-*" \
              --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
              --output text)
          
          echo "Latest AMI ID: $IMAGE_ID"
          
          aws ec2 modify-image-attribute \
              --profile dev \
              --image-id $IMAGE_ID  \
              --launch-permission "Add=[{UserId=${{ secrets.AWS_DEMO_ACCOUNT }}}]"

      - name: 'Set Up Google Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - name: 'Share image to Demo Account GCP'
        run: |
          IMAGE_GCP_ID=$(gcloud compute images list --project ${{ secrets.GCP_DEV_ACCOUNT }} --no-standard-images --sort-by="~creationTimestamp" --limit=1 --format="value(name)")
          
          echo "Latest Machine Image: $IMAGE_GCP_ID"
          
          gcloud compute images create $IMAGE_GCP_ID \
          --source-image=$IMAGE_GCP_ID \
          --source-image-project=${{ secrets.GCP_DEV_ACCOUNT }} \
          --project=${{ secrets.GCP_DEMO_ACCOUNT }}
          




